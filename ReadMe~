
Λειτουυργικά Συστήματα-Εργασία
Όνομα: Μπρέκη Χριστίνα-Μαρίνα



Εκτέλεση Προγράμματος:

Το πρόγραμμα εκτελείτε αυστηρά με τον παρακάτω τρόπο: 

./myphones -l DataFile -o OperationsFile  (ανεξάρτητα της σειράς)

Δεν έχει υλοποιηθεί το config-file και δεν υπάρχει έλεγχος για το flag -c.



Σχεδιασμός:

-Η δομή αποτελείται από ένα πίνακα κατακερματισμού (HashTable).Το μέγεθος του πίνακα σε περίπτωση που έχουμε επιτυχές load Datafile είναι το 1/10 του πλήθους των εγγραφών.Διαφορετικά default μέγεθος 100.

-Η συνάρτηση κατακερματισμού κρατά τα 4 τελευταία ψηφία του phone της εγγραφής τα οποία και διαιρεί με το μέγεθος του πίνακα.

-Κάθε στοιχείο του πίνακα δείχνει σε μία κεφαλή λίστας δεικτών σε εγγραφές.

-Το inverted index αποτελείτε από μία λίστα στοιχείων τύπου TownListNode όπου κάθε κόβος δείχνει στον πρώτο στοιχείο λιστών από δείκτες σε εγγραφές(RPNode).Η βασική λίστα του ευρετηρίου έχει κεφαλή τύπου TownList.   


Αρχεία:


main.c:

-Διάβασμα αρχείων datafile (αν υπάρχει) και operationsfile.
-Δημιουργία του hashtable και του invered index (TownList).
-Εισαγωγή εγγραφών σε περίπτωση υπαρκτού datafile
-Εκτέλεση λειτουργιών του operationsfile.
-Αν δεν δοθεί εντολή exit στο operation file περιμένει να δωθεί εντολή από τον χρήστη.
________________
RecordList.c/RecordList.h

Περιλαμβάνει τις λειτουργίες που εκτελούνται στις λίστες που δείχνουν τα στοιχεία του πίνακα.Κάθε εγγραφή της λίστας είναι τύπου Node.Κάθε λίστα έχει μία κεφαλή τύπου HeadNode.

-void create_node(Record *, Node *);
Δημιουργία νέου κόμβου

-void insert_Tolist(HeadNode * headNode, Node * node );
Εισαγωγή στοιχείου στην λίστα.Γίνεται πάντα στο τέλος της λίστας.


-void delete_fromList(HeadNode * headNode , char * phone);
διαγραφή στοιχείου από την λίστα ανάλογα με το phone που έχει δοθεί.
______________

Record.c/Record.h

Ορίζει τον τύπο της εγγραφής και την συνάρτηση δημιουργίας μίας εγγραφής η οποία επιστρέφει έναν δείκτη στην εγγραφή αυτή.
_______________

HashTable.c/HashTable.h

Ορίζει τις λειτουργίες του hash table

-void create_table(HashTable * hashtable, int tSize);
Δημιουργία του πίνακα κατακερματισμού.

-int hashFunc(HashTable * , char * );
Η συνάρτηση κατακερματισμού.Επιστρέφει τον ακέραιο που παράγεται για κάθε phone.

void set_ht(HashTable * hashtable, Node * node);
Τοποθέτηση της εγγραφής στην κατάλληλη λίστα που δείχνουν τα στοιχεία του πίνακα.

Record * find_record(HashTable * hashtable, char * phone);
Αναζήτηση εγγραφής στις λίστες του πίνακα με Key το phone. Επιστέφει έναν στην εγγραφή που αναζητά

void printHT(HashTable * hashtable);
Εκτύπωση των περιεχομένων του πίνακα κατακερματισμού (δεν χρησιμοποιείται).
_________________
 
Index.c/Index.h

Περιλαμβάνει τις λειτουργίες που αφορούν το inverted index.Η βασική λίστα αποτελείτε από πόλεις για τις οποίες υπάρχουν εγγραφές και το στοιχείο rnNode κάθε κόμβου δείχνει στο πρώτο στοιχείο της λίστας με δείκτες προς τις εγγραφές που προέρχονται από την πόλη αυτή. 

-void init_TownList(TownList * townList); & void destroy_TownList(TownList * townList);
Συναρτήσεις δημιουργίας και καταστροφής το κόμβου κεφαλής της βασικής λίστας  των πόλεων

void create_TownListNode(TownListNode * townListNode, Record * record);
Δημιουργία ενός κόμβου της λίστας των πόλεων.

TownListNode * search_town(TownList * townList, char * town);
Αναζήτηση μιά πολής στην λίστα.

void insert_TownListNode(TownList *townList , TownListNode * townListNode);
Εισαγωγή ενός κόμβου. Γίνεται στο τέλος της λίστας

void delete_TownListNode(TownList  * townList);
Διαγραφή ενός κόμβου από την λίστα.Ένας κόμβος διαγράφεται όταν πλέον δεν υπάρχει κάποια εγγραφή που προέρχεται από την πόλη αυτή (population = 0). Η συνάρτηση αυτή δεν ζητείται.


void insert_RP(TownListNode * townListNode , RPNode * rpNode);
Εισαγωγή ενός κόμβου στην λίστα των εγγραφών μιας πόλης.Η εισαγωγή γίνεται με βάση ταξινόμησης.

void print_RPList(TownList *townList);
Εκτύπωση όλων των περιεχομένων του ευρετηρίου.(δεν ζητείται)

void delete_RP(TownListNode * townListNode , char * phone);
Διαγραφή ενός κόμβου από την λίστα των εγγραφών μιας πόλης.

__________________

Array.c / Array.h

Καθώς κατά την εκτέλεση της εισαγωγής στοιχείων στο ευρετήριο δεν πραγματοποιείται κάποια ταξινόμηση, για την εκτέλεση των λειτουργιών t(op)  κ fts οι πληροφορίες που  χρειάζόμαστε κάθε φορά αντιγράφονται σε πίνακα τύπου TopPop ή TopSpend αντίστοιχα ,ταξινομούνται χρησιμοποιώντας τον αλγόριθμο ταξινόμησης quicksort,εκτυπώνονται τα αποτελέσματα και καταστρέφεται ο πίνακας που χρησιμοποιήθηκε.
Η υλοποίηση ταξινόμησης του πίνακα βασίστηκε το παράκάτω παράδειγμα: http://www.comp.dit.ie/rlawlor/Alg_DS/sorting/quickSort.c 

_______________________

Operations.c / Operations.h

Υλοποίηση των βασικών λειτουργιών που ζητούνται από την δομή.







 

